import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useLanguage } from './context/LanguageContext';
import './Metrics.css';
import ProgressBar from './components/ProgressBar';

function Metrics() {
  const navigate = useNavigate();
  const { t } = useLanguage();
  const [formData, setFormData] = useState({
    location: '',
    audience: '',
    audienceOther: '',
    projectDates: {
      start: '',
      end: ''
    },
    budget: '',
    teamSize: '',
    experience: '',
    projectType: []
  });

  const locations = [
    { value: 'BY', label: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
    { value: 'PL', label: '–ü–æ–ª—å—à—á–∞', flag: 'üáµüá±' },
    { value: 'LT', label: '–õ—ñ—Ç–≤–∞', flag: 'üá±üáπ' },
    { value: 'DE', label: '–ì–µ—Ä–º–∞–Ω—ñ—è', flag: 'üá©üá™' }
  ];

  const audiences = [
    { value: 'BY', label: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
    { value: 'PL', label: '–ü–æ–ª—å—à—á–∞', flag: 'üáµüá±' },
    { value: 'LT', label: '–õ—ñ—Ç–≤–∞', flag: 'üá±üáπ' },
    { value: 'EU', label: '–ï–°', flag: 'üá™üá∫' },
    { value: 'OTHER', label: '–Ü–Ω—à–∞–µ', flag: 'üåç' }
  ];

  const teamSizes = [
    '1 —á–∞–ª–∞–≤–µ–∫',
    '2-5 —á–∞–ª–∞–≤–µ–∫',
    '6-10 —á–∞–ª–∞–≤–µ–∫',
    '10-15 —á–∞–ª–∞–≤–µ–∫',
    '15+ —á–∞–ª–∞–≤–µ–∫'
  ];

  const experienceYears = [
    '1 –≥–æ–¥',
    '2 –≥–∞–¥—ã',
    '3 –≥–∞–¥—ã',
    '4 –≥–∞–¥—ã',
    '5 –≥–∞–¥–æ—û'
  ];

  const projectTypes = [
    { value: 'creative', label: '–¢–≤–æ—Ä—á—ã', emoji: 'üé®' },
    { value: 'humanitarian', label: '–ì—É–º–∞–Ω—ñ—Ç–∞—Ä–Ω—ã', emoji: 'ü§ù' },
    { value: 'social', label: '–°–∞—Ü—ã—è–ª—å–Ω—ã', emoji: 'üë•' },
    { value: 'educational', label: '–ê–¥—É–∫–∞—Ü—ã–π–Ω—ã', emoji: 'üìö' },
    { value: 'cultural', label: '–ö—É–ª—å—Ç—É—Ä–Ω—ã', emoji: 'üé≠' },
    { value: 'media', label: '–ú–µ–¥—ã—è', emoji: 'üì±' },
    { value: 'rights', label: '–ü—Ä–∞–≤—ã —á–∞–ª–∞–≤–µ–∫–∞', emoji: '‚öñÔ∏è' }
  ];

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', formData);
    alert('–ó–∞—è—û–∫–∞ –ø–∞—Å–ø—è—Ö–æ–≤–∞ –∞–¥–ø—Ä–∞—û–ª–µ–Ω–∞!');
    navigate('/');
  };

  return (
    <div className="metrics-wrapper">
      <ProgressBar currentStep={3} />
      <div className="metrics-container">
        <form onSubmit={handleSubmit}>
          {/* –õ–æ–∫–∞—Ü–∏—è */}
          <div className="form-section">
            <h3>{t.metrics.location}</h3>
            <div className="options-grid">
              {locations.map(loc => (
                <div
                  key={loc.value}
                  className={`option-block ${formData.location === loc.value ? 'selected' : ''}`}
                  onClick={() => handleChange('location', loc.value)}
                >
                  <span className="option-flag">{loc.flag}</span>
                  <span className="option-label">{loc.label}</span>
                </div>
              ))}
            </div>
          </div>

          {/* –ê—É–¥–∏—Ç–æ—Ä–∏—è */}
          <div className="form-section">
            <h3>{t.metrics.audience}</h3>
            <div className="options-grid">
              {audiences.map(aud => (
                <div
                  key={aud.value}
                  className={`option-block ${formData.audience === aud.value ? 'selected' : ''}`}
                  onClick={() => handleChange('audience', aud.value)}
                >
                  <span className="option-flag">{aud.flag}</span>
                  <span className="option-label">{aud.label}</span>
                </div>
              ))}
            </div>
            {formData.audience === 'OTHER' && (
              <input
                type="text"
                className="other-input"
                value={formData.audienceOther}
                onChange={(e) => handleChange('audienceOther', e.target.value)}
                placeholder={t.metrics.otherPlaceholder}
              />
            )}
          </div>

          {/* –°—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ */}
          <div className="form-section">
            <h3>{t.metrics.projectDates}</h3>
            <div className="date-inputs">
              <div>
                <label>{t.metrics.startDate}</label>
                <input
                  type="date"
                  value={formData.projectDates.start}
                  onChange={(e) => handleChange('projectDates', {
                    ...formData.projectDates,
                    start: e.target.value
                  })}
                />
              </div>
              <div>
                <label>{t.metrics.endDate}</label>
                <input
                  type="date"
                  value={formData.projectDates.end}
                  onChange={(e) => handleChange('projectDates', {
                    ...formData.projectDates,
                    end: e.target.value
                  })}
                />
              </div>
            </div>
          </div>

          {/* –ë—é–¥–∂–µ—Ç */}
          <div className="form-section">
            <h3>–ó–∞–ø—Ä–∞—à—ã–≤–∞–µ–º—ã –±—é–¥–∂—ç—Ç</h3>
            <input
              type="number"
              className="budget-input"
              value={formData.budget}
              onChange={(e) => handleChange('budget', e.target.value)}
              placeholder="–£–≤—è–¥–∑—ñ—Ü–µ —Å—É–º—É —û –µ—û—Ä–∞"
            />
          </div>

          {/* –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã */}
          <div className="form-section">
            <h3>{t.metrics.teamSize}</h3>
            <div className="options-grid">
              {teamSizes.map(size => (
                <div
                  key={size}
                  className={`option-block ${formData.teamSize === size ? 'selected' : ''}`}
                  onClick={() => handleChange('teamSize', size)}
                >
                  {size}
                </div>
              ))}
            </div>
          </div>

          {/* –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã */}
          <div className="form-section">
            <h3>{t.metrics.experience}</h3>
            <div className="options-grid">
              {experienceYears.map(year => (
                <div
                  key={year}
                  className={`option-block ${formData.experience === year ? 'selected' : ''}`}
                  onClick={() => handleChange('experience', year)}
                >
                  {year}
                </div>
              ))}
            </div>
          </div>

          {/* –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ */}
          <div className="form-section">
            <h3>{t.metrics.projectType}</h3>
            <div className="options-grid">
              {projectTypes.map(type => (
                <div
                  key={type.value}
                  className={`option-block ${formData.projectType.includes(type.value) ? 'selected' : ''}`}
                  onClick={() => {
                    const newTypes = formData.projectType.includes(type.value)
                      ? formData.projectType.filter(t => t !== type.value)
                      : [...formData.projectType, type.value];
                    handleChange('projectType', newTypes);
                  }}
                >
                  <span className="option-emoji">{type.emoji}</span>
                  <span className="option-label">{type.label}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="form-navigation">
            <button 
              type="button" 
              onClick={() => navigate('/form')}
              className="btn-secondary"
            >
              {t.back}
            </button>
            <button type="submit" className="btn-submit">
              {t.submit}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default Metrics;